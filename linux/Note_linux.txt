根目录 cd /
/bin binary 二进制文件，可执行文件，shell 命令
/dev device,在linux下 一切皆文件
/bin：存放二进制可执行文件
/boot：存放开机启动程序
/dev：存放设备文件： 字符设备、块设备
/home：存放普通用户
/etc：用户信息和系统配置文件 passwd、group
/lib：库文件：libc.so.6
/root：管理员宿主目录（家目录）
/usr：用户资源管理目录

shell基本操作
遍历历史记录 :ctrl+p 向上 ctrl+n向下
删除光标前面字符 :backspace,ctrl+h
删除光标后面字符 :ctrl+d 
删除前面的字符串: ctrl+u
删除后面的字符串: ctrl+k
移动光标: 向前 ctrl+b 向后 ctrl+f
移动到最前面: ctrl+a 移动到最后面:ctrl+e

cd - 在相邻的两个目录之间切换
pwd 显示当前目录的路径

mkdir -p 路径 创建多级目录

touch 创建文件（当文件不存在时）
      更新文件的时间

rmdir 只可以删除一个空目录

rm -r 目录名 可以删除目录 -r是以递归的方式处理
rm -ri 增加删除提示
rm -i 

cp 要复制的文件 目标文件 如果目标不存在 将新建一个
cp file1 file2 file1的内容会覆盖file2的内容 file为文件 非目录
cp file1 目录 file1会复制进目录里面
cp -r dir1(存在) dir2(存在) 两个目录 将dir1 目录复制进入 dir2   dir2目录包含dir1目录
cp -r dir1(存在) dir2(不存在) dir1 中的目录下的内容 复制进dir2 并创建dir2 dir2目录不包含dir1

mv 改名或者移动文件
mv file1 file2 
mv file(文件存在) file1(不存在) file与file1都为文件 给文件改名
mv dir(目录) dir1(不存在) 给目录改名
    移动
    mv file dir 将file 移动到dir中
    mv dir dir1 两个目录都存在 直接将dir移动到dir1中
    mv file1 file2 两个都存在 覆盖 file1覆盖file2的内容 file1将不存在

cat 查看文件内容
    cat filename 将文件内容打印到终端
more: more filename 查看全部文件内容 enter键按行查看 空格键快速查看 只能向下查看 q退出
less: less filename 向下一行 回车 ctrl+n 向上ctrl+p 翻页:向下翻页空格 pagedown 向上pageup q退出
head:查看文件头部 前十行默认 head -n filename n为要查看的行数
tail: 与head同理 查看文件尾部

文件链接
软硬链接 ln 
软链接 ln -s 绝对路径 快捷方式的名字 创建快捷方式 文件和目录操作同理
硬链接
相当于给文件起别名
ln 文件名(绝对路径相对路径都可) 硬链接名字 
创建一个新文件，硬链接计数为1
给文件创建了硬链接：2
删除一个硬链接：1
再删除硬链接计数的方式
使用场景：磁盘上有一个文件 /home/chuan/workspace/Makefile
          在其他多个目录中管理Makefile，并能实时同步
chmod 文字设定法
chmod who[+|-|=]mode filename
who: u->user 文件所属者 g-> 文件所属用户组 o-> 其他人 a 所有人
mode：r w x -没有任何权限
chmod u-rx filename 用户减去读和执行权限
chmod u+r，g-x filename 用户加上读权限，用户组取消执行权限
chmod 数字设定法
chmod 777 filename 
chmod -777 filename 减去所有人的权限
mode: r -> 4 w -> 2 x -> 1 - -> 0 八进制的数
0756 7代表文件所有者 5 代表 文件所有用户组 6代表其他人

修改文件所有者和文件所有组
chown 新的所有者 文件名 
chown 新的所有者:新的所有组 文件名

修改文件所有组 
chgrp 
chgrp 新的组 文件名

find 需要查找的目录 -name "filename"
*代表所有文件
find 查找目录 -type 文件类型
普通文件：f
目录：d
符号链接：l
管道：p
套接字：s
字符设备：c
块设备：b
按照文件大小查找
find 查找目录 -size + N
+ 大于 - 小于
N 
单位 k 小写 M大写
大于10k 小于100k :find . -size +10k -size +100k
按日期查找:
    创建日期:-ctime -n/+n
        -n:n天以内 +n:n天以外
        find -ctime -1 一天以内创建的文件
    修改日期:-mtime -n/+n
    访问日期:-atime -n/+n
按深度查找
    -maxdepth n层数 n层以下的目录
    -mindepth n     n层以上的目录(包含n)
find 搜索路径 参数 搜索的内容
grep 搜索内容 参数 搜素的路径 
find ./ -type d -exec ls -l {} \;
find ./ -type d -ok ls -l {} \; 比较安全
find ./ -type d | xargs ls -l(shell命令)
ls -l 

grep -r (有目录) "查找的内容" 搜索的路径
grep -r "helloworld" /home -n -n的显示查找到的字符串在第几行

压缩文件
linux常用压缩格式
.gz --gzip
.bz2 --bzip2
常用压缩命令
tar 打包工具  
    参数 c 创建压缩文件
         x 释放压缩文件
         v 打印压缩信息
         f 指定压缩包名字
         z 使用gzip压缩文件 .tar.gz
         j 使用bzip2压缩文件 .tar.bz2
    tar 参数 压缩包名字 原材料 --gz
    tar zcvf test.tar.gz filename dirname
    tar 参数 压缩包名字 参数 解压路径
    tar zxvf test.tar.gz -C 解压目录

rar a 压缩包名 压缩内容 压缩目录 -r
rar x 压缩包名 解压目录

zip 参数 压缩包名 原材料
如果有目录 -r
unzip 压缩包的名字 -d 解压目录

data：2021/2/20
静态库：对空间要求较低，对时间要求较高
动态库：对时间要求较低，对空间要求较高
静态库生成步骤：1、生成.o 文件 gcc -c file.c -o file.o
                2、制作静态库  ar rcs libxxx.a xx.o
                3、编译静态库到可执行文件中 gcc test.c libxxx.a -o test
动态库生成步骤：1、将 .c文件生成为.o 文件(生成与位置无关的代码)
                gcc -c add.c -o add.o -fPIC
                2、gcc -shared 制作动态库
                gcc -shared lib库名.so add.o 
                3、使用动态库，编译可执行程序时，指定所使用的动态库
                -l 用来指定库名 -L 用来指定库路径
                gcc test.c -o a.out -lmymath -L./lib
                4、运行可执行程序./a.out
                链接器：工作于链接阶段 需要 -l和-L 支持
                动态链接器：工作于运行阶段。需要提供动态库目录所在位置
                export LD_LIBRARY_PAHT = 动态库路径
                ./a.out 

环境变量：
Linux中set 、env 和 export 都可以查看环境变量。
set<命令显示当前shell的变量，包括当前用户的变量，set主要用来设置sh的参数与选项
env命令显示当前用户的变量，env用来在构建的环境中运行命令
export命令显示当前导出成用户变量的shell变量

1、控制台中设置 (只对当前shell有效)
    执行 export PATH=$PATH:/tmp/test 命令：
2、修改当前家目录下的 .bashrc 文件 (只对当前用户有效)
    先执行 vim ~/.bashrc 命令，在最末尾加入下面内容，然后 source ~/.bashrc，使配置文件生效。
    export PATH=$PATH:/tmp/test
3、修改/etc/bashrc 文件 (针对所有用户有效)
    先执行 sudo vim /etc/profile 命令，在最末尾加入下面内容，然后 source /etc/profile，使配置文件生效。
    export PATH=$PATH:/tmp/test
    注：source命令通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。

进程：
fork()函数返回两次，父子进程互相并发。
fork函数之后的代码执行两次 一次是子进程执行，一次是父进程执行。执行顺序没有先后
int execve(const char *path, char *const argv[], char *const envp[])
execve() 函数用于执行参数 path 字符串所代表的文件路径（必须指定路径），执行该文件时会传入一个数组作
为执行该文件时传递过去的参数 argv[0]、argv[1] ⋯argv[n] ，除此之外该函数还会为新程序复制最
后一个参数所指示的环境变量（envp）。
